df <- read.csv('sales.csv')
head(df)
sales <- df$Sales
head(sales)
sales_ts <- ts(sales, frequency = 52, start=c(2010, 2, 5))
sales_ts
plot.ts(sales_ts)
decompose_sales <- decompose(sales_ts, type = c("multiplicative"))
plot(decompose_sales)
#Trend
plot(as.ts(decompose_sales$trend))
#Seasonal
plot(as.ts(decompose_sales$seasonal))
#Random
plot(as.ts(decompose_sales$random))
sales_single <- HoltWinters(sales_ts, gamma=FALSE, beta=FALSE)
sales_single_forecast <- forecast(sales_single)
library(forecast)
sales_single <- HoltWinters(sales_ts, gamma=FALSE, beta=FALSE)
sales_single_forecast <- forecast(sales_single)
print("Forecast plot from Holt-Winters")
plot(sales_single_forecast)
print("Holt-Winters Filtering")
plot(sales_single)
library(forecast)
decompose_sales <- decompose(sales_ts, type = c("multiplicative"))
plot(decompose_sales)
#Trend
plot(as.ts(decompose_sales$trend))
#Seasonal
plot(as.ts(decompose_sales$seasonal))
#Random
plot(as.ts(decompose_sales$random))
sales_single <- HoltWinters(sales_ts, gamma=FALSE, beta=FALSE)
sales_single_forecast <- forecast(sales_single)
print("Forecast plot from Holt-Winters")
plot(sales_single_forecast)
print("Holt-Winters Filtering")
plot(sales_single)
sales_double <- HoltWinters(sales_ts, gamma=FALSE)
sales_double_forecast <- forecast(sales_double)
print("Forecast plot from Holt-Winters")
plot(sales_double_forecast)
print("Holt-Winters Filtering")
plot(sales_double)
sales_triple <- HoltWinters(sales_ts)
sales_triple_forecast <- forecast(sales_triple)
print("Forecast plot from Holt-Winters")
plot(sales_triple_forecast)
print("Holt-Winters Filtering")
plot(sales_triple)
library(forecast)
df <- read.csv('sales.csv')
head(df)
sales <- df$Sales
head(sales)
sales_ts <- ts(sales, frequency = 52, start=c(2010, 2, 5))
sales_ts
plot.ts(sales_ts)
sales.train <- window(sales,end = 114)
sales.test <- window(sales,start = 115)
simple_exp <- HoltWinters(sales_ts, beta=FALSE, gamma=FALSE)
simple_exp_acc <- forecast(simple_exp)
cat("Forecast plot from Holt-Winters")
plot(simple_exp_acc)
cat("Holt-Winters Filtering")
plot(simple_exp)
sales_ses <- HoltWinters(sales_ts, gamma=FALSE, beta=FALSE)
sales_ses_forecast <- forecast(sales_ses)
print("Forecast plot from Holt-Winters")
plot(sales_ses_forecast)
print("Holt-Winters Filtering")
plot(ses_single)
sales_ses <- HoltWinters(sales_ts, gamma=FALSE, beta=FALSE)
sales_ses_forecast <- forecast(sales_ses)
print("Forecast plot from Holt-Winters")
plot(sales_ses_forecast)
print("Holt-Winters Filtering")
plot(sales_ses)
sales_des <- HoltWinters(sales_ts, gamma=FALSE)
sales_des_forecast <- forecast(sales_des)
print("Forecast plot from Holt-Winters")
plot(sales_des_forecast)
print("Holt-Winters Filtering")
plot(sales_des)
sales_tes <- HoltWinters(sales_ts)
sales_tes_forecast <- forecast(sales_tes)
print("Forecast plot from Holt-Winters")
plot(sales_tes_forecast)
print("Holt-Winters Filtering")
plot(sales_tes)
#plot(sales_timeseries, ylab="Weekly Sales")
lines(sales_ses$fitted[,1], lty="dashed", col="red")
View(sales_ses)
View(sales_ses)
plot(sales_ts, ylab="Weekly Sales",xlim=c(2010,2012))
lines(sales_ses$fitted[,1], lty="dashed", col="red")
lines(sales_des$fitted[,1], lty="dashed", col="blue")
lines(sales_tes$fitted[,1], lty="dashed", col="green")
#legend(x="topleft", legend=c('SES', 'DES', 'TES'), col=c('red', 'blue', 'green'), lty="dashed")
plot(sales_ts, ylab="Weekly Sales"
lines(sales_ses$fitted[,1], lty="dashed", col="red")
plot(sales_ts, ylab="Weekly Sales")
lines(sales_ses$fitted[,1], lty="dashed", col="red")
lines(sales_des$fitted[,1], lty="dashed", col="blue")
lines(sales_tes$fitted[,1], lty="dashed", col="green")
#legend(x="topleft", legend=c('SES', 'DES', 'TES'), col=c('red', 'blue', 'green'), lty="dashed")
plot(sales_ts, ylab="Weekly Sales")
lines(sales_ses$fitted[,1], lty="dashed", col="red")
lines(sales_des$fitted[,1], lty="dashed", col="blue")
lines(sales_tes$fitted[,1], lty="dashed", col="green")
legend(x="topleft", legend=c('SES', 'DES', 'TES'), col=c('red', 'blue', 'green'), lty="dashed")
sales_mlr=lm(Sales ~ . - Date, data = df)
summary(sales_mlr)
plot.ts(sales_ts)
sales_mlr_pred <- ts(predict(reg), frequency = 52, start=c(2010,2,5))
sales_mlr=lm(Sales ~ . - Date, data = df)
summary(sales_mlr)
plot.ts(sales_ts)
sales_mlr_pred <- ts(predict(sales_mlr), frequency = 52, start=c(2010,2,5))
lines(sales_mlr_pred, lty="dashed", col="blue")
fit_model <- lm(Sales ~ Holiday_Flag+Temperature+Fuel_Price+CPI+Unemployment+Laptop_Demand,data = df)
summary(fit_model)
laptop_demand <- df$Laptop_Demand
laptop_demand_ts <- ts(laptop_demand, frequency = 52, start = c(2010, 2, 5))
plot.ts(laptop_demand_ts)
#use croston with laptop_demand_ts, h=143
#plot the result using lines as shown on line 83
laptop_demand_pred<-croston(laptop_demand_ts, h = 143)
lines(laptop_demand_pred, lty="dashed", col="blue")
laptop_demand_pred<-croston(laptop_demand_ts, h = 143,alpha = 0.1, x = y)
laptop_demand_pred<-croston(laptop_demand_ts, h = 143,alpha = 0.1, x = laptop_demand_ts)
lines(laptop_demand_pred, lty="dashed", col="blue")
View(laptop_demand_pred)
laptop_demand_pred<-croston(laptop_demand_ts, h = 143,alpha = 0.1, x = laptop_demand_ts)
lines(laptop_demand_pred[,1], lty="dashed", col="blue")
laptop_demand_pred<-croston(laptop_demand_ts, h = 143,alpha = 0.1, x = laptop_demand_ts)
print(laptop_demand_pred)
l#ines(laptop_demand_pred[,1], lty="dashed", col="blue")
laptop_demand_pred<-croston(laptop_demand_ts, h = 143,alpha = 0.1, x = laptop_demand_ts)
print(laptop_demand_pred)
#lines(laptop_demand_pred[,1], lty="dashed", col="blue")
View(sales_double_forecast)
View(sales_des)
laptop_demand_pred<-croston(laptop_demand_ts, h = 143,alpha = 0.1, x = laptop_demand_ts)
print(laptop_demand_pred)
lines(laptop_demand_pred$fitted[,1], lty="dashed", col="blue")
laptop_demand_pred<-croston(laptop_demand_ts, h = 143,alpha = 0.1, x = laptop_demand_ts)
print(laptop_demand_pred)
lines(laptop_demand_pred$fitted[,1], lty="dashed", col="blue")
laptop_demand_pred<-croston(laptop_demand_ts, h = 143,alpha = 0.1, x = laptop_demand_ts)
print(laptop_demand_pred)
lines(laptop_demand_pred$fitted, lty="dashed", col="blue")
laptop_demand_pred<-croston(laptop_demand_ts, h = 143,alpha = 0.1, x = laptop_demand_ts)
print(laptop_demand_pred)
plot(laptop_demand_pred)
lines(laptop_demand_pred$fitted, lty="dashed", col="blue")
laptop_demand_pred<-croston(laptop_demand_ts, h = 143,alpha = 0.1, x = laptop_demand_ts)
print(laptop_demand_pred)
#plot(laptop_demand_pred)
plot.ts(laptop_demand_ts)
lines(laptop_demand_pred$fitted, lty="dashed", col="blue")
laptop_demand_pred<-croston(laptop_demand_ts, h = 143,alpha = 0.1, x = laptop_demand_ts)
print(laptop_demand_pred)
plot(laptop_demand_pred)
#plot.ts(laptop_demand_ts)
lines(laptop_demand_pred$fitted, lty="dashed", col="blue")
laptop_demand_pred<-croston(laptop_demand_ts, h = 143,alpha = 0.1, x = laptop_demand_ts)
print(laptop_demand_pred)
#plot(laptop_demand_pred)
plot.ts(laptop_demand_ts)
lines(laptop_demand_pred$fitted, lty="dashed", col="blue")
laptop_demand_pred<-croston(laptop_demand_ts, h = 143,alpha = 0.1, x = laptop_demand_ts)
print(laptop_demand_pred)
plot(laptop_demand_pred)
#plot.ts(laptop_demand_ts)
lines(laptop_demand_pred$fitted, lty="dashed", col="blue")
plot(sales_ts, ylab="Weekly Sales")
lines(sales_ses$fitted[,1], lty="dashed", col="red")
lines(sales_des$fitted[,1], lty="dashed", col="blue")
lines(sales_tes$fitted[,1], lty="dashed", col="green")
legend(x="topleft", legend=c('SES', 'DES', 'TES'), col=c('red', 'blue', 'green'), lty="dashed")
laptop_demand_pred<-croston(laptop_demand_ts, h = 143,alpha = 0.1, x = laptop_demand_ts)
print(laptop_demand_pred)
#plot(laptop_demand_pred)
plot.ts(laptop_demand_ts)
lines(laptop_demand_pred$fitted, lty="dashed", col="blue")
library(Metrics)
install.packages("Metrics")
library(Metrics)
sales_ses_rmse<-rmse(sales_ts, sales_ses$fitted[,1])
sales_ses_mape <- mape(sales_ts, sales_ses$fitted[,1])
sales_des_rmse<-rmse(sales_ts, sales_des$fitted[,1])
sales_des_mape <- mape(sales_ts, sales_des$fitted[,1])
sales_tes_rmse<-rmse(sales_ts, sales_tes$fitted[,1])
sales_tes_mape <- mape(sales_ts, sales_tes$fitted[,1])
sales_reg_rmse<-rmse(sales_ts, sales_mlr_pred$fitted[,1])
library(Metrics)
sales_ses_rmse<-rmse(sales_ts, sales_ses$fitted[,1])
sales_ses_mape <- mape(sales_ts, sales_ses$fitted[,1])
sales_des_rmse<-rmse(sales_ts, sales_des$fitted[,1])
sales_des_mape <- mape(sales_ts, sales_des$fitted[,1])
sales_tes_rmse<-rmse(sales_ts, sales_tes$fitted[,1])
sales_tes_mape <- mape(sales_ts, sales_tes$fitted[,1])
sales_reg_rmse<-rmse(sales_ts, sales_mlr$fitted[,1])
View(sales_double_forecast)
View(sales_mlr)
View(sales_mlr)
library(Metrics)
sales_ses_rmse<-rmse(sales_ts, sales_ses$fitted[,1])
sales_ses_mape <- mape(sales_ts, sales_ses$fitted[,1])
sales_des_rmse<-rmse(sales_ts, sales_des$fitted[,1])
sales_des_mape <- mape(sales_ts, sales_des$fitted[,1])
sales_tes_rmse<-rmse(sales_ts, sales_tes$fitted[,1])
sales_tes_mape <- mape(sales_ts, sales_tes$fitted[,1])
sales_reg_rmse<-rmse(sales_ts, sales_mlr$fitted.values[,1])
library(Metrics)
sales_ses_rmse<-rmse(sales_ts, sales_ses$fitted[,1])
sales_ses_mape <- mape(sales_ts, sales_ses$fitted[,1])
sales_des_rmse<-rmse(sales_ts, sales_des$fitted[,1])
sales_des_mape <- mape(sales_ts, sales_des$fitted[,1])
sales_tes_rmse<-rmse(sales_ts, sales_tes$fitted[,1])
sales_tes_mape <- mape(sales_ts, sales_tes$fitted[,1])
sales_reg_rmse<-rmse(sales_ts, sales_mlr$fitted.values)
sales_reg_mape <- mape(sales_ts, sales_mlr$fitted.values)
library(Metrics)
sales_ses_rmse<-rmse(sales_ts, sales_ses$fitted[,1])
sales_ses_mape <- mape(sales_ts, sales_ses$fitted[,1])
cat("RMSE for sales_ses: ",sales_ses_rmse)
sales_des_rmse<-rmse(sales_ts, sales_des$fitted[,1])
sales_des_mape <- mape(sales_ts, sales_des$fitted[,1])
sales_tes_rmse<-rmse(sales_ts, sales_tes$fitted[,1])
sales_tes_mape <- mape(sales_ts, sales_tes$fitted[,1])
sales_reg_rmse<-rmse(sales_ts, sales_mlr$fitted.values)
sales_reg_mape <- mape(sales_ts, sales_mlr$fitted.values)
library(Metrics)
sales_ses_rmse<-rmse(sales_ts, sales_ses$fitted[,1])
sales_ses_mape <- mape(sales_ts, sales_ses$fitted[,1])
cat("RMSE for sales_ses: ",sales_ses_rmse,"\nMAPE for sales_ses: ",sales_ses_mape)
sales_des_rmse<-rmse(sales_ts, sales_des$fitted[,1])
sales_des_mape <- mape(sales_ts, sales_des$fitted[,1])
sales_tes_rmse<-rmse(sales_ts, sales_tes$fitted[,1])
sales_tes_mape <- mape(sales_ts, sales_tes$fitted[,1])
sales_reg_rmse<-rmse(sales_ts, sales_mlr$fitted.values)
sales_reg_mape <- mape(sales_ts, sales_mlr$fitted.values)
library(Metrics)
sales_ses_rmse<-rmse(sales_ts, sales_ses$fitted[,1])
sales_ses_mape <- mape(sales_ts, sales_ses$fitted[,1])
cat("RMSE for sales_ses: ",sales_ses_rmse,"\nMAPE for sales_ses: ",sales_ses_mape)
sales_des_rmse<-rmse(sales_ts, sales_des$fitted[,1])
sales_des_mape <- mape(sales_ts, sales_des$fitted[,1])
cat("RMSE for sales_des: ",sales_des_rmse,"\nMAPE for sales_des: ",sales_des_mape)
sales_tes_rmse<-rmse(sales_ts, sales_tes$fitted[,1])
sales_tes_mape <- mape(sales_ts, sales_tes$fitted[,1])
cat("RMSE for sales_tes: ",sales_tes_rmse,"\nMAPE for sales_tes: ",sales_tes_mape)
sales_reg_rmse<-rmse(sales_ts, sales_mlr$fitted.values)
sales_reg_mape <- mape(sales_ts, sales_mlr$fitted.values)
cat("RMSE for regression model: ",sales_reg_rmse,"\nMAPE for regression model: ",sales_reg_mape)
library(Metrics)
sales_ses_rmse<-rmse(sales_ts, sales_ses$fitted[,1])
sales_ses_mape <- mape(sales_ts, sales_ses$fitted[,1])
cat("RMSE for sales_ses: ",sales_ses_rmse,"\nMAPE for sales_ses: ",sales_ses_mape,"\n\n")
sales_des_rmse<-rmse(sales_ts, sales_des$fitted[,1])
sales_des_mape <- mape(sales_ts, sales_des$fitted[,1])
cat("RMSE for sales_des: ",sales_des_rmse,"\nMAPE for sales_des: ",sales_des_mape,"\n\n")
sales_tes_rmse<-rmse(sales_ts, sales_tes$fitted[,1])
sales_tes_mape <- mape(sales_ts, sales_tes$fitted[,1])
cat("RMSE for sales_tes: ",sales_tes_rmse,"\nMAPE for sales_tes: ",sales_tes_mape,"\n\n")
sales_reg_rmse<-rmse(sales_ts, sales_mlr$fitted.values)
sales_reg_mape <- mape(sales_ts, sales_mlr$fitted.values)
cat("RMSE for regression model: ",sales_reg_rmse,"\nMAPE for regression model: ",sales_reg_mape,"\n\n")
laptop_demand_pred<-croston(laptop_demand_ts, h = 143,alpha = 0.1, x = laptop_demand_ts)
print(laptop_demand_pred)
plot.ts(laptop_demand_ts)
lines(laptop_demand_pred$fitted, lty="dashed", col="blue")
plot.ts(laptop_demand_pred)
lines(laptop_demand_pred$fitted, lty="dashed", col="blue")
laptop_demand_pred<-croston(laptop_demand_ts, h = 143,alpha = 0.1, x = laptop_demand_ts)
print(laptop_demand_pred)
plot.ts(laptop_demand_ts)
lines(laptop_demand_pred$fitted, lty="dashed", col="blue")
plot(laptop_demand_pred)
lines(laptop_demand_pred$fitted, lty="dashed", col="blue")
