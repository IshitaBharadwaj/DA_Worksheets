install.packages("InformationValue")
library(tidyverse)
library(InformationValue)
char_preds <- read.csv('got_characters.csv')
#No. of characters listed in the dataframe
sprintf("The no. of characters listed in the data = %d", nrow(char_preds))
#Set empty entries to NA
char_preds[char_preds == "" | char_preds == " "] <- NA
# Make a DF for number of null vals in each column
df <- data.frame(colSums(is.na(char_preds)) / nrow(char_preds) * 100)
# Rename column with an appropriate header
colnames(df) <- c('% Missing')
# Reset index and make a feature of col names
df$Columns <- rownames(df)
rownames(df) <- NULL
# Order in decreasing order of percentages -
new_df <- df[order(df$'% Missing', decreasing = TRUE), ]
rownames(new_df) <- NULL
new_df
#What are the inferences you can draw from the output dataframe of
#the previous problem? How can we handle columns with extremely
#high proportions of missing data before moving on?
#If the missing data in a column does not tell you something about the target
#variable (`actual`) or it is MCAR, set a missing percentage threshold of 80%,
#deeming the column as having insufficient data, and drop the column.
remove <- new_df[new_df$'% Missing' > 80,'Columns']
char_preds <- char_preds[!names(char_preds) %in% remove]
#Function to compute mode (if you need this for any inputation)
# Function to calculate mode
get_mode <- function(x) {
mode0 <- names(which.max(table(x)))
if(is.numeric(x)) return(as.numeric(mode0))
mode0
}
char_categorical <- c('culture','title','house')
char_preds[, char_categorical] <- lapply(char_preds[, char_categorical], as.factor)
char_preds[, char_categorical] <- sapply(char_preds[, char_categorical], unclass)
char_preds$age[is.na(char_preds$age)] <- get_mode(char_preds$age)
# Replace missing with -1
char_preds[is.na(char_preds)] = -1
ggplot(char_preds, aes(x=age)) + geom_bar()
withouth <- char_preds$age[char_preds$age!=100]
impute_age <-get_mode(withouth)
char_preds$age[is.na(char_preds$age)]=impute_age
ggplot(char_preds, aes(x=age)) + geom_bar()
withouth <- char_preds$age[char_preds$age!=100]
impute_age <-get_mode(withouth)
char_preds$age[is.na(char_preds$age)]=impute_age
ggplot(char_preds, aes(x=age)) + geom_bar()
colSums(is.na(char_preds$age))
withouth <- char_preds$age[char_preds$age!=100]
impute_age <-get_mode(withouth)
char_preds$age[is.na(char_preds$age)]=impute_age
ggplot(char_preds, aes(x=age)) + geom_bar()
colSums(is.na(char_preds))
library(tidyverse)
library(InformationValue)
char_preds <- read.csv('got_characters.csv')
#No. of characters listed in the dataframe
sprintf("The no. of characters listed in the data = %d", nrow(char_preds))
#Set empty entries to NA
char_preds[char_preds == "" | char_preds == " "] <- NA
# Make a DF for number of null vals in each column
df <- data.frame(colSums(is.na(char_preds)) / nrow(char_preds) * 100)
# Rename column with an appropriate header
colnames(df) <- c('% Missing')
# Reset index and make a feature of col names
df$Columns <- rownames(df)
rownames(df) <- NULL
# Order in decreasing order of percentages -
new_df <- df[order(df$'% Missing', decreasing = TRUE), ]
rownames(new_df) <- NULL
new_df
#What are the inferences you can draw from the output dataframe of
#the previous problem? How can we handle columns with extremely
#high proportions of missing data before moving on?
#If the missing data in a column does not tell you something about the target
#variable (`actual`) or it is MCAR, set a missing percentage threshold of 80%,
#deeming the column as having insufficient data, and drop the column.
remove <- new_df[new_df$'% Missing' > 80,'Columns']
char_preds <- char_preds[!names(char_preds) %in% remove]
#Function to compute mode (if you need this for any inputation)
# Function to calculate mode
get_mode <- function(x) {
mode0 <- names(which.max(table(x)))
if(is.numeric(x)) return(as.numeric(mode0))
mode0
}
char_categorical <- c('culture','title','house')
char_preds[, char_categorical] <- lapply(char_preds[, char_categorical], as.factor)
char_preds[, char_categorical] <- sapply(char_preds[, char_categorical], unclass)
#char_preds$age[is.na(char_preds$age)] <- get_mode(char_preds$age)
ggplot(char_preds, aes(x=age)) + geom_bar()
withouth <- char_preds$age[char_preds$age!=100]
impute_age <-get_mode(withouth)
char_preds$age[is.na(char_preds$age)]=impute_age
ggplot(char_preds, aes(x=age)) + geom_bar()
colSums(is.na(char_preds))
ggplot(char_preds, aes(x=age)) + geom_bar()
# Replace missing with -1
char_preds[is.na(char_preds)] = -1
withouth <- char_preds$age[char_preds$age!=100]
impute_age <-get_mode(withouth)
print(impute_age)
char_preds$age[is.na(char_preds$age)]=impute_age
ggplot(char_preds, aes(x=age)) + geom_bar()
colSums(is.na(char_preds))
ggplot(char_preds, aes(x=age)) + geom_bar()
# Replace missing with -1
char_preds[is.na(char_preds)] = -1
# Original distribution
table(char_preds$actual)
# Create training data
input_ones <- char_preds[which(char_preds$actual == 1), ]
input_zeros <- char_preds[which(char_preds$actual == 0), ]  # all 0's
set.seed(100)
# Sample from all alive characters
input_ones_training_rows <- sample(1:nrow(input_ones), 0.7*nrow(input_zeros))
# Sample from all dead characters
input_zeros_training_rows <- sample(1:nrow(input_zeros), 0.7*nrow(input_zeros))
training_ones <- input_ones[input_ones_training_rows, ]
training_zeros <- input_zeros[input_zeros_training_rows, ]
# Row bind both class dataframes
trainingData <- rbind(training_ones, training_zeros)
# Shuffle rows
trainingData <- trainingData[sample(1:nrow(trainingData)), ]
# Create testing data
test_ones <- input_ones[-input_ones_training_rows, ]
#Create testing data for zeros and bind the dataframes as shown in the above lines
#testData is the variable that will store the dataframe after binding
#Check the distribution of classes in the splits
table(trainingData$actual)
table(testData$actual)
